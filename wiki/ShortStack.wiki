= Alchemy's Short Stack =

*WARNING: Alchemy's Short Stack is VERY experimental*

Alchemy's Short Stack refers to using Alchemy Database as a webserver-datastore stack. Turning on {{{webservermode}}} will activate HTTP serving on Alchemy's listening port. To provide a layer to protect database data from the outside world, in {{{webservermode}}} there are only 2 paths to access data:
  * whitelisted-IPs: App-servers whose IP addresses have been whitelisted in {{{redis.conf}}} can directly access Alchemy Database
  * other-IPs -> whitelisted lua functions: other IP addresses (i.e. external) can only call whitelisted lua functions (which then access the DB), ALL other calls (e.g. GET,SET,INSERT,SELECT) are prohibited.

Alchemy's Short Stack supports both HTTP and redis' protocol, the latter can be accessed in Javascript via a Flash (Actionscript _TODO LINK_) object and has improved performance.

The following is a diagram of how Alchemy can be used in a Short-Stack architecture:

http://allinram.info/alsosql/AlchemyShortStack.png

Simple requests (via HTTP, Javascript, or Flash) can be processed by a whitelisted lua function in Alchemy Database.

To configure this setup, the following settings must be activated in the file *redis.conf*:
{{{
  webservermode yes
  whitelist_lua whitelist.lua
  webserver_index_function index_page
  webserver_whitelist_address 192.168.1.1
  webserver_whitelist_netmask 255.255.255.0
}}}

The variable {{{webservermode}}} turns the short-stack on.

The variable {{{whitelist_lua}}} points to a file that contains whitelisted lua modules, that must be w/in a module named: "whitelist". Only functions in the module "whitelist" can be called from the frontend.

Example whitelist.lua
{{{
function index_page() 
  return '<html>HI I AM THE INDEX PAGE</html>';
end
function welcome(user) 
  return '<html><h2>HI: ' + user + '</h2><img src ="/STATIC/logo.png"/></html>';
end
}}}

The variable {{{webserver_index_function}}} is the function that is called, when "GET / HTTP/1.0" is called, or it is the function that generates the index.html page (in the above whitelist.lua, {{{index_page()}}} would be called).

The HTTP call {{{GET /welcome/user333 HTTP/1.0}}} would be translated to the lua function {{{welcome('user333');}}} and the HTML {{{'<html><h2>HI: user333</h2><img src ="/STATIC/logo.png"/></html>}}} would be returned as a HTTP 200.

The variables {{{webserver_whitelist_address}}} and {{{webserver_whitelist_netmask}}} define the range of ip-addresses that will be allowed directed access to Alchemy Database (i.e. the whitelisted ips). These whitelisted ips are for App-Servers.

A blog explaining the why, when, and how of the Short-Stack can be found [http://jaksprats.wordpress.com/2011/07/13/the-short-stack/ here]

The Actionscript and Jsquery libraries can be found here: _TODO: LINK_

=== STATIC FILES ==
A backdoor for static files has been built in. Any key starting w/ "STATIC/" can be served directly from Alchemy.

So the HTTP request "GET /STATIC/a.gif HTTP/1.0\r\n\r\n" is allowed from the outside world and maps to the Alchemy command "GET STATIC/a.gif"

=== HTTP Interface ===
HTTP Request Headers are made available in Lua via the associative array {{{HTTP_HEADER[]}}}. If you want the value of the HTTP Request Header 'Host', it is accessible in Lua as {{{HTTP_HEADER['Host']}}}

HTTP Request Cookies are made available in Lua via the associative array {{{COOKIE[]}}}. If you want the value of the HTTP Request Cookie 'mycookie', it is accessible in Lua as {{{COOKIE['mycookie']}}}

Setting HTTP Response Headers can be done in Lua via the Lua function {{{SetHttpResponseHeader}}}. Setting the HTTP Response Header 'Expires', would be done by calling {{{SetHttpResponseHeader('Expires', 'Wed, 09 Jun 2021 10:18:14 GMT');}}}. Setting the HTTP Response Cookie 'mycookie' can be done in Lua by calling {{{SetHttpResponseHeader('Set-Cookie', 'mycookie=value_for_mycookie; Expires=Wed, 09 Jun 2021 10:18:14 GMT; path=/;');}}}

HTTP Redirects can be called from Lua via the function {{{SetHttpRedirect(redirect_url);}}}. To redirect to the page 'index', call: {{{SetHttpRedirect('/index_page'); return;}}} and return immediately w/ no return value.

=== DEMO ===
A port of the demo app [http://retwis.antirez.com/ retwis] (written in php) to Alchemy's Short Stack Lua can be found [https://github.com/JakSprats/Alchemy-Database/blob/master/redis_unstable/src/external/retwis_whitelist.lua here]