= Alchemy's Short Stack =

*WARNING: Alchemy's Short Stack is VERY experimental*

The following is a diagram of how Alchemy can be used in a Short-Stack architecture:

http://allinram.info/alsosql/AlchemyShortStack.png

Simple requests (via HTTP, Javascript, or Flash) can be processed by a whitelisted lua function in Alchemy Database.

To configure this setup, the following settings must be activated in the file *redis.conf*:
{{{
  webservermode yes
  whitelist_lua whitelist.lua
  webserver_index_function index_page
  webserver_whitelist_address 192.168.1.1
  webserver_whitelist_netmask 255.255.255.0
}}}

The variable {{{webservermode}}} turns the short-stack on.

The variable {{{whitelist_lua}}} points to a file that contains whitelisted lua modules, that must be w/in a module named: "whitelist". Only functions in the module "whitelist" can be called from the frontend.

Example whitelist.lua
{{{
function index_page() 
  return '<html>HI I AM THE INDEX PAGE</html>';
end
function login_page(user, passwd) 
  return '<html>USER: ' + user + ' is logging in</html>';
end
}}}

The variable {{{webserver_index_function}}} is the function that is called, when "GET / HTTP/1.0" is called, or it is the function that generates the index.html page.

The variables {{{webserver_whitelist_address}}} and {{{webserver_whitelist_netmask}}} define the range of ip-addresses that will be allowed directed access to Alchemy Database (i.e. the whitelisted ips). These whitelisted ips are for App-Servers.

A blog explaining the why, when, and how of the Short-Stack can be found here: _TODO: LINK_

The Actionscript and Jsquery libraries can be found here: _TODO: LINK_