= Alchemy's Graph Database =

A [http://en.wikipedia.org/wiki/Graph_database Graph Database] uses graph structures with nodes, edges, and properties to represent and store data. AlchemyDB modeled its Graph Database after [http://neo4j.org/ Neo4j].

== Basics ==
A `Node` stores data. A `Node` can have `Relationships` to other Nodes. An example would be `James -> KNOWS -> Jill`. Here, "James" & "Jill" are the `Nodes` and `KNOWS` is the `Relationship`.

`Node`s can also have `Properties`, which are unstructured key-value data attached to the Node. `James` could have the `Property: ['job-title'='manager']`. 'Jill' could have the `Property: ['hobby'='swimming']`.

GraphDB's excel at queries like: `Find ALL the managers who know people whose hobby is swimming`.

A `Relationship` can also have a `Property` associated to it, for instance if James knows Jill since 2005, then the relationship would have the `Property:` ('since'=2005) and can be visually represented as `Relationship: James -> KNOWS (since:2005) -> Jill`

== Lua implementation ==
AlchemyDB implements a GraphDB using Lua for logic and SQL for indexing. The code can be found [https://github.com/JakSprats/Alchemy-Database/blob/master/redis_unstable/src/core/graph.lua here].  And examples, showing depth-first traversals, breadth-first traversals, and short-path algorithms can be found [https://github.com/JakSprats/Alchemy-Database/blob/master/redis_unstable/src/core/example_user_cities.lua here].

== Pure Lua Function Indexes ==
Graph Databases often have the ability to index specific relationships. For instance, the relationship: `users who have visited NYC` can be indexed. And looking up users who have visited NYC is an efficient index lookup. Alchemy introduced a pure lua function index for this purpose. It is up to the developer to maintain this index in his lua routines. 

Using the example of indexing the relationship: `users who have visited NYC` the developer should add new primary keys to this index every time a user creates a relationship `VISITS->NYC`. Deleting this relationship doesnt really make much sense, but if a user could somehow UN-visit NYC, then his primary key should be deleted from this index. The explanation so far has been an oversimplification: every time a user visits a city (assuming users are in the SQL table: `users` and cities are in the SQL table: `cities`) the call: `alchemySetIndexByName('visits_index', cities.pk, user.pk)`. This allows later calls to get all users.PKs who have visited city w/ cities.PK=X possible.

Here is Alchemy's syntax for the Pure Lua Function Index:
{{{
   CREATE INDEX indexname ON tablename "(whereclausetoken())" TYPE constructUserGraphHooks destructUserGraphHooks
}}}
TYPE can be any ColumnType: (e.g. INT,TEXT,FLOAT,etc..)

`whereclausetoken()` is used in SQL where clauses to directly access the Pure-Lua-Function-Index.

Examples:
{{{
  SELECT \* FROM tablename WHERE whereclausetoken() = 7
  SELECT \* FROM tablename WHERE whereclausetoken() BETWEEN 2 AND 5
  SELECT \* FROM tablename WHERE whereclausetoken() IN (3,7,9)
}}}

`constructUserGraphHooks` is a lua function that should place hooks into your Lua environment and "Construct" the Index.

`destructUserGraphHooks` is a lua function responsible for destructing the Index.

The Lua functions that the hooks can use to call into Alchemy's RDBMS are:
{{{
  alchemySetIndexByName(), alchemyUpdateIndexByName(), alchemyDeleteIndexByName()
}}}

= MORE TO COME =
I am tired, I will write more tomorrow :)